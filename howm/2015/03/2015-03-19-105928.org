* IODEVICE / 画像認識 高速化要求 - [[file:d:/user/Dropbox/soft/howm/mail/%E3%80%90%E8%AD%B0%E4%BA%8B%E3%83%A1%E3%83%A23%EF%BC%8F11%E3%80%91%E3%82%AF%E3%83%A9%E3%83%AA%E3%82%AA%E3%83%B3%20%EF%BC%88%E3%82%80%EF%BC%89%E6%9D%A5%E7%A4%BE%E3%80%80V2H%E6%80%A7%E8%83%BD%E6%94%B9%E5%96%84_3015-03-13_fushimi.eml][議事録]]                                     :V2H:
** V2Hクラリオン環境構築 <2015-03-12 木>@ 10:00-15:00 at ルネサス武蔵
** 開催通知
    10:00-13:00 第一会議室
    12:00-15:00 第八会議室
    CL：岩田さん、加藤さん、吉岡さん
    日研：宇田川さん
    HiICS：斉藤さん、川上さん
    REC：高草、藤巻
    ADac：慶野さん
** 緒言 (岩田さん)
*** OEM殿からの指摘 (豊松様、立石様、飯島課長)
 - 自動駐車アプリは実現出来るのか
 - ＋αでどういったアプリが実装出来るのか
 - R-CarV2Hでは今後の展開が無理なのでは？
 - 3月末迄に画認処理時間の高速化要求
 - 今後のソリューションについてOEM殿に説明が必要
*** IODEVICEのレジスタアクセス待ちが影響しているのではないか？ (斉藤様)
     画認アプリは優先度最低もシステム全体の処理時間が遅くなってしまう
     CPU使用率：画認25%、フレームバッファ25%
     IMP,IMR関連レジスタのバーチャルdrvからカーネルdrvへのアクセス：数mmかかっている
*** 搭載アプリ (加藤様)
     駐車枠認識(IMP->CPU) 500mm sec -> 300mm SH7766からの移管
     移動体検知(IMP->CPU->IMP) 500mm sec              <= ここまで負荷は大したことない、CPUをふんだんに使用している
     静止立体物検知(IMP->CV->CPU)   500mm sec -> 150mm<= ここで負荷が大きくなる
     空間マップ       70mm
      駐車枠はSH77650の時は300mmもかからなかった。V2Hの性能から考えるともっと速度が出るはずと思っている (加藤様)
** CPU間通信 (MSIOF) (斉藤様)
     特定のドライバではなく、DCドライバも含めて処理時間が長い
     レジスタアクセスが遅い。いくつかのバスを経由するせい？
     MSIOFのアクセス、理論値6cycに対し、実行値16cyc/320mm secかかっている (頻度100%)
 [ ] レジスタアクセスの期待値と頻度を教えて欲しい。(3.13REL)
** TU, VIN周りは特に問題なし
     アプリ処理が始まってから動き出しているので割り込み処理は使っていない。
     CPU使用率は25%と高い
** 画認libのレジスタアクセスについて
 - IMPライブラリはカーネルレジスタアクセスに改造済み
    IMR、CVは未対応
 - 静止物体物検知はLKオプトの処理が大きいと思い (加藤様、細かく調査していない)
   IMPとCVで2コアずつシェア。2コアの確保に時間かかっているのでは？ (木村さん)
   CV 1コアでも特に処理時間変わらない (加藤様)
   ピラミッド構造の場合、レジスタアクセスも増えてしまう (木村さん)
** DDRバス負荷
DDRのLCCのレジスタ設定見直しで若干アクセス速度上げる予定であるが、
 現行、DBSC動作調整レジスタ、バスコンをマニュアル4に対し8で設定している。
 [ ] これが影響している可能性は？ (吉岡様) (3/12REL回答出来るか確認)
 [ ] バス負荷を改めて測定し、3/12(金)に報告頂く (岩田様)

INTEGRITYのメモリ保護の観点から、改善は難しい
割り込み応答性、仮想アドレス空間への通知の改善は難しい。カーネル内部で処理を行うしかないのでは？
IODEVICEを使わずメモリフュージョン経由でレジスタをマッピング
 [ ] 仮想アドレス空間への通知時間がかかることの説明。(処理フロー)

** CPU負荷率の最終目標
    NDSで80%と規程されている。追加のアプリを考慮し、目標値70%としたい (岩田様)

** 宿題事項
 [ ]負荷がかかっている部分の解析 -> 3/16以降着手(ADaCからのMULTIトレーニングが来週の為)約2週間
 [ ]アプリの改善余地の分析 (IMPライブラリ,CVライブラリの使い方のアドバイス)
 [ ]CVライブラリのレジスタアクセスの改造 (カーネル直接操作) -> 3.19迄順次リリース
 [ ]画認アプリの解決優先度は移動物検知・駐車枠の順番 (IMPライブラリの負荷低減が優先)
 [ ]CVライブラリ改善版リリース(3月末) - アルゴリズム改善、レジスタアクセス改善
 [ ]IMRドライバ改善版リリース (3.20) - レジスタアクセス改善
  レジスタアクセス改善
   レジスタアクセスをIODevice仕様からMemoryRegion仕様に変更 (CV,IMR)

** 量産までのスケジュール
8月 設計評価完
10月 EIPF生産
11月 EIPF日産に納入
*** 4月末に移動物検知の高速化の目処をつけて、5月末評価完としたい。

** FBmanのCPU負荷低減について
実車搭載時の計測の為、どこで負荷が高くなっているかは不明
IMP,CVからは毎回アクセスする仕様ではない。メモリ確保している限りレジスタアクセスはない
画像を画認用に加工するときにFBmanにアクセスしている可能性あり。CL側で確認 (加藤様)
 [ ] FB_man：メモリリージョンオブジェクトの生成・破棄の確認 (3.20一次回答)
 [ ] TIME_TICの確認、2コアでu-sleepがOKか？ NGの場合対策案提示日程 (3.20ADaC回答)
 [ ] IODEVICE問題の調査方法再検討 (3.20ADaC回答)


 
** 【議事録：3/12】クラリオン R-CarV2Hパフォーマンス改善打合せ
*** ＜日 時＞
 2015年3月12日（木） 10:00-15:00
 - ＜場 所＞
 ルネサス武蔵事業所 第一会議室（AM）、第八会議室（PM）
 - ＜出席者＞
 クラリオン／岩田M、吉岡さん、加藤さん、高田さん
 日研／宇田川さん
 HiICS／斎藤さん、川上さん
 ADaC／慶野さん
 REL／大橋さん、星さん、木村さん、森田さん、他3名様
 REC／伏見、高草、藤巻（記）

*** ＜アクションアイテム＞
 1. MSIOFのレジスタアクセスに320nsec掛かってしまう要因について回答
  → （3/13、REL）
 2. DBADJ2レジスタの設定を8から4に変更した場合の影響について回答
  → （可能早期、REL）
 3. DDRバス負荷ツールを吉岡さんに送付
  → （3/12済、REC）
 4. CVlibのユーザ空間-カーネル空間レジスタアクセス方法変更、効果確認
  → （3/20、REL）
 5. IMRのユーザ空間-カーネル空間レジスタアクセス方法変更、効果確認
  → （3/20、REL）
 6. IMPlibのユーザ空間-カーネル空間レジスタアクセス方法変更、効果確認
  → （3/20、REL）
 7. FB_MANのメモリリージョンオブジェクトの生成、破棄に伴うCPU使用率確認
  → （3/20一次報告、REL）
 8. ユーザ空間からカーネル空間を経由したレジスタアクセスに時間が掛かる説明
  → （3/E、ADaC殿）
 9. u_sleepのTIME_TIC確認、両方のCPUコアでu_sleep実行しても問題ないか、
  問題ある場合対策日程の提示
  → （3/20、ADaC殿）
 10. io_devicenotifyの処理時間が数msec必要になる原因の調査方法検討
  → （3/20、ADaC殿）
 11. dll_loadの7MByteの制限解除、もしくは容量を拡げられないか検討
  → （3/20、ADaC殿）

*** ＜内 容＞
 - クラリオンにてR-CarV2H+INTEGRITYに自動駐車アプリを実装しているが、
   画像認識の処理速度が遅く既に性能限界になっている。
   日産からこのままでは今後のアプリ追加に対応できないのではないか、と
   指摘されており、3/Eまでに性能改善が課題となっている状況。
   画像認識の処理性能改善について課題の共有、状況の認識合わせ、
   アクションアイテム整理、クラリオン開発環境のレクチャーを目的に打合せ実施。
   現状CPU使用率90%なのに対し、性能改善により60%～70%になることがゴール。
   詳細は添付ホワイトボード参照。

 - 画像認識のタスク優先度を最低にしているが、システム全体の処理時間が遅く
   なってしまっており、IODEVICE、ISR、コールバックの処理時間が影響していると想定。
   CPU占有率：画認=25%、フレームバッファ=25%
   IMP、IMR関連レジスタアクセスにusecオーダーが掛かってしまている。
   画認アプリは
   ①駐車枠検出
   ②移動物体検出
   ③静止立体物検出
   ④空間MAP
   で、①、③、④は実装済み。②はOEMには見せていないがこれから実装予定。
   処理性能の影響は、①、④だけでは少ないが、そこに③を加えると大きい。
   処理時間は①、③は500msec、④は70msec、②はこれから実装も500msec程度。
   処理手順は①はIMP→CPU、②はIMP→CPU、③はIMP→CV→CPU。
   ①、③はそれぞれSH77650の処理時間である300msec、150msecがターゲット。
   ボトルネックは割込応答、IODEVICE、レジスタアクセスの処理時間。
   VIN、DUドライバはクラリオンで見直したが効果なし。
   IMPlibはカーネルドライバを経由しない様変更済み。
   ルネサスでの評価も終わっているが、クラリオン環境での効果確認がまだの状況。
   ③の処理時間500msecの内、LKオプティカルフローの処理時間が大半を占めている。
   CVlibで使うIMPは2コア、1コアどちらも試したが効果なし。

 - MSIOFへのレジスタアクセスも実測320nsec（誤@52MHz、正@32.5MHz）。
   理論値6cycの倍イメージで処理時間掛かっており要因について回答ほしい。
   DBADJ2レジスタのDUを使う場合の制約事項（設定値8→4）の影響について
   教えてほしい。
   DDRバス負荷ツールを再度吉岡様に送付する。

 - カーネル空間からユーザ空間への割込応答時間の改善は難しい。
   対策案としては、レジスタをマッピングする、カーネル空間で処理する、など。
   なぜカーネル空間-ユーザ空間のアクセス、応答に時間が掛かるのか分からず
   OEMにも説明できない、説明資料を3/Eまでに提出してほしい。

*** 作業内容、日程、アクションアイテム整理。
    クラリオン環境での各処理時間の分析、レジスタアクセス時間の改善、画認アルゴリズムの
    再検討は並行して作業可能。
    クラリオンの画認アプリの優先順位は、
    （1）移動物体検出
    （2）駐車枠検出
    （3）静止立体物検出
    画認アプリの処理時間はカメラの入力映像には余り影響しない。
    OEMでの実写評価ではCAN負荷が高く、処理性能への影響が大きい。
    短期的には3/E、長期的に見ても5/Eがターゲットとなる。
    遅くとも4/Eまでに分析完了し、5月には移動物体アプリを実装しフィードバックを目標としたい。

*** 次回打合せは3/20（金）を仮置きし、時間、内容は別途クラリオンに連絡する。
