* 画認アプリ アルゴリズム説明会 プレ SOD <2015-04-07 火>@ 9:00-12:00 at CL/C-1
** 目標値
  MoD : 現行300-400 -> 目標値150msec
  SoD : 現行300 -> 目標値100msec (実用ベース150msec - 緒方さん)
  駐車枠 : 現行450 -> 目標値300msec

** 特徴点抽出
  Harrisコーナーを抽出
  1. 処理領域及び中秋つ領域マスクを設定
  2. Harrsコーナー値を算出
  3. ラスタスキャンし、抽出領域マスク以外の極大値を特徴点として抽出

** 立体物位置の算出
  三角測量結果を確立マップに投票、ベイズの定理から確立がある閾値以上であれば物体があるとする

** 特徴的追跡
  ピラミッドLK法で処理
  追跡結果が処理領域を超えていたら削除、そうでなければ登録

** 現行割り込み回数
  MOD:1000回
  PMR:200回
  SOD:30回

** DBD認識処理の流れと処理時間
  Start
    ↓
  自車移動距離が一定以上 No→Return
    ↓Yes
  履歴画像生成      DBD内部で使用する履歴画像を生成する
    ↓
  特徴点抽出        過去画像から特徴点を抽出する
    ↓                    ave22.540146 min13 max68
  特徴点追跡        過去画像から現在画像へ特徴点を追跡する
    ↓                    ave48.802921 min29 max119
  カメラ運動推定    車両挙動からカメラの運動を推定する
    ↓                    ave6.802920 min0 max51
  カメラ運動が推定出来た No→Return
    ↓Yes
  立体物位置の算出  特徴点の追跡結果と推定したカメラの運動から三角測量によって立体物の位置を算出する
    ↓                    ave22.380596   min7 max85
  Return
                          トータル ave110.138687 min70 max186

   参考 (特徴点追跡 LK1回 ave 22.992701 min13 max88)

** 今後の対策案
*** CVlib内部
   LKOptialFlowのSrc画像(2枚)のキャッシュパージを削除

*** IMPlib
   ユーザアプリ側でのコアの予約 ⇒ 確認中。それ時代リリース。今月中には見える
   DisplayListの活用(連結) ⇒ 同上
   LocalMemoryの活用(DisplayListの検討のあと)

*** DBD
   Shaderコアを２個使っているところを１個にしてトライ
   ※現状の特徴点数だと、いけそう
  極値探索を
   IMPlib-Harris
   IMPlib-LocalMax
   IMPlib-EdgeCode

*** 画像アプリ全体
   Refreshimg()の削除
   CLlibのAPIへの置き換え

*** システム全体
   メモリ確保・開放の削減
     AllocImgExtもfbmanが介在しているので、削除
   IODeviceRegister MemoryRegion方式への置き換え検討
   割り込みの削減
   画認アプリ処理量の削減

** ルネサス宿題
  オーバーヘッドを極力少なくする方法についてのアドバイス資料を作成する

** 408(水) 日産-CL打合せ 面会者
*** リーフ向けV2H案件
   日産/佐藤様
        早川さん担当
*** 先々の話 V3H vs nVidia
   日産/武田様
